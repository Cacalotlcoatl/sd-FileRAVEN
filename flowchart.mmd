graph TD
%%{
    init: {
        'theme': 'base',
        'themeVariables': {
            'background': '#FFFFFF',
            'primaryColor': '#000000',
            'primaryBorderColor': '#1AFF00',
            'primaryTextColor': '#1AFF00',
            'secondaryColor': '#000000',
            'secondaryBorderColor': '#007C00',
            'secondaryTextColor': '#6AB800',
            'lineColor': '#6AB800',
            'tertiaryColor': '#0F0F64'
        }
  }
}%%
%%  Terminal symbol: ([Stadium symbol]) - Program start and end points.
%%  Process symbol: [box] - Statements or operations.
%%  Function symbol: [[predefined process]] - Function or a subroutine.
%%  External function: (external function) - External function or third-party
%%      software (e.g., web-app).
%%  Conditional symbol: {diamond} - Decision or conditional branch.
%%  Input symbol: [/Right Parallelogram/] - User input.
%%  Output symbol: [\Left Parallelogram\] - Output to monitor.
%%  Storage symbol: [(cylinder)] - Read/write to/from a database or file.
%%  Data symbol: {{hexagon}} - Data assignment statements.
%%  Initialize: >asymmetric] - Initialize variables.
%%  Document: [\Inverted Trapezoid/] - Report/document generation.
%%  Process symbol: [\Regular Trapezoid/] - Statements or operations not
%%      specifically covered by other symbols.

kickoff([start_fileRAVEN.bat]) --> main
quit([end program])


method_no_info[Default/Revert<br>proposed_name =<br>current_name]
read_local_info[/populate model_info<br>from local file.<br>Overwrite remote data. /]
search_local[(search for<br>local info files)]


check_for_data{Verify at least<br>one field of the naming<br>template is filled}
select_model_type[/Select a<br>model-type to edit \]
select_files --> cycle_file_list
cycle_file_list --> last_file


get_hash --> search_remote
read_remote_to_model_info --> search_local

check_fr_name -->|yes|method_last
method_last --> approve_filename
check_fr_name -->|no|check_for_data
check_for_data -->|yes|method_construct
check_for_data -->|no|method_no_info

rename_revert --> last_file

rename_file[rename file] --> cycle_file_list

edit_template_routing -->|file selected|method_construct
edit_template_routing -->|no file <br>selected|display_home


write_local_data --> main_menu



subgraph ui.py
main --> display_home --> main_menu
display_home[display<br>Main Menu]
main_menu{Main Menu<br>Select Models,<br>Undo Last Renaming,<br>Edit
Templates,<br>Edit Model Info,<br>Quit}
select_files[/File Selection Menu<br>select files or folder\] & manual_model_edit & select_model_type & reindex_last --> rename_revert & quit
main_menu -->|Select Models|select_files
main_menu -->|Undo Last Renaming|reindex_last
main_menu -->|Edit Templates|select_model_type
main_menu -->|Edit Model Info|manual_model_edit
main_menu -->|Quit|quit
select_model_type --> edit_template
approve_filename{User Approval Menu<br>Rename the Model,<br>Edit Template<br>Edit Model Info<br>Revert to Current Name<br>Undo Last Renaming}
rename_file[rename file] & edit_template[/Edit Template<br>for the
currently<br>selected file type\] & manual_model_edit & method_no_info & reindex_last & edit_filename & cycle_file_list
approve_filename -->|Approve|rename_file
approve_filename -->|Edit Template|edit_template
approve_filename -->|Edit Model Info|manual_model_edit
approve_filename -->|Revert|method_no_info
approve_filename -->|Undo Last|reindex_last[current_model=<br>last_model]
approve_filename -->|No|edit_filename
approve_filename -->|Skip|cycle_file_list
select_model[user select<br>from matching models]
edit_filename --> approve_filename
end

subgraph main.py
main[Execute main.py]
cycle_file_list[Next File<br>last_file = current_file]
last_file[\end of file list?/]
last_file -->|yes|display_home
Last_file -->|no|get_hash
get_hash[calculate hash<br>values for the<br>model file]
check_fr_name[/check for<br>fileRAVEN nametag/]
edit_template --> edit_template_routing{File<br>selected for<br>renaming?}
method_construct[Construct Filename<br>from data elements<br>according to template]
method_last[Last fileRAVEN Name<br>proposed_name =<br>fr_name]
method_construct -->|no info|approve_filename
method_construct --> approve_filename
method_no_info --> approve_filename

end

subgraph manual_model_editor
manual_model_edit[[Manual Model Edit]]
manual_model_edit --> manual_model_edit_keep[\Keep Changes?/]
manual_model_edit_keep --> main_menu & write_local_data
manual_model_edit_keep -->|No|main_menu
manual_model_edit_keep -->|Yes|write_local_data
write_local_data[(Write Model<br>Data to<br>Local File)]
end

subgraph remote_db
search_remote[(search remote db<br>for hash matches)] --> unique_hash
unique_hash{hash<br>matches found in<br>remote db}

unique_hash -->|unique|read_remote_to_model_info
unique_hash -->|not unique|select_model
read_remote_to_model_info[/populate model_info<br>from remote db/]
select_model --> read_remote_to_model_info
end

subgraph local_db
unique_hash -->|not found|search_local
read_local_info & check_for_data & method_no_info
search_local -->|Local data: yes|read_local_info
search_local -->|Remote Data: yes<br>Local Data: no|check_for_data
search_local -->|Remote data: no<br>Local data: no|method_no_info
read_local_info --> check_fr_name
end
