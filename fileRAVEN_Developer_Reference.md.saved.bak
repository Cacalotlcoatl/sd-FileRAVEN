# Project: sd-FileRAVEN

### (Reader-friendly Application for Validated Entity Naming)

# Developed by Brian Conroy
<br>Date of initial commit: December 15, 2023

**sd-FileRAVEN** is a cross-platform utility designed to assist users in
quickly and effectively annotating and attributing models with information
about base model, author, and version. By retrieving information for models
downloaded from civitai.com and renaming the model files to user-friendly
standardized filenames, sd-FileRAVEN helps to eliminate duplicates, prevent
confusion between similarly or cryptically named models, enhances
organization, and streamlines the user's model library. With its ability to
help eliminate duplicates and to distinguish identically-named models, this
application proves to be an invaluable asset for model management.
---

## PROJECT MAP / TOC

#### project/

1. **Launcher**  fileRAVEN.bat
   2**Main Module**  main.py
    1. **Main Configuration**  fileRAVEN.config
2. **GUI Module**  ui.py
    1. **Streamlit** Standalone framework
    2. **Streamlit** Extension framework
   3. **Gradio** Extension framework
3. **Integrations Module** integration/
    1. Active Development
    2. Future Development
        1. [stable-diffusion-webui](https://github.com/AUTOMATIC1111/stable-diffusion-webui)
        2. [ComfyUI](https://github.com/comfyanonymous/ComfyUI)
        3. [AI Horde](https://stablehorde.net/)
        4. [InvokeAI](https://github.com/invoke-ai/InvokeAI)
    3. Under Consideration:
        - [Runway Stable Diffusion](https://github.com/runwayml/stable-diffusion)
        - [Compviz Stable Diffusion](https://github.com/CompVis/stable-diffusion)
        - [GLID-3-XL-stable](https://github.com/Jack000/glid-3-xl-stable)
        - [Deforum Stable Diffusion](https://github.com/deforum/stable-diffusion)
        - [Deforum Stable Diffusion Local Version](https://github.com/HelixNGC7293/DeforumStableDiffusionLocal)
        - [diffusion-ui](https://github.com/leszekhanusz/diffusion-ui)
        - [Sygil WebUI](https://github.com/Sygil-Dev/sygil-webui/)
        - [Easy Diffusion](https://github.com/easydiffusion/easydiffusion)
        - ~~GRisk AI~~ software behind paywall is not considered
        - [stable_diffusion.openvino](https://github.com/bes-dev/stable_diffusion.openvino)
        - [Stable Diffusion WebUI Docker](https://github.com/AbdBarho/stable-diffusion-webui-docker)
        - [NMKD Stable Diffusion GUI](https://nmkd.itch.io/t2i-gui)
        - [~~Diffusion
          Bee~~](https://github.com/divamgupta/diffusionbee-stable-diffusion-ui/tree/master)
          Not
          doing Mac software. If someone else wants to handle this be my guest.
        - [~~Unstable Diffusion~~](https://github.com/ahrm/UnstableFusion)
          Dead project?
        - [~~Japanese Stable
          Diffusion~~](https://github.com/rinnakk/japanese-stable-diffusion)
          Dead project?
4. **File IO Module**  fileRAVEN_manager.py
5. **Lookup Module**  fileRAVEN_remote.py
    1. **Lookup Module Configuration**  fileRAVEN_remote.config
    2. **API Keyring** fileRAVEN_remote.keyring
6. **Templates** templates/
    1. base.html
    2. model.html
    3. style.css
7. readme.md
8. fileRAVEN_Developer's_Reference.md (This document)

---

### 1. fileRAVEN.bat

fileRAVEN.bat is a simple batch program to check/install dependencies, set
launch options and start main.py.

#### 1.1. Default Script

#### 1.2. Launch Options

#### TODO:

- Make default script
- default launch configuration
- enumerate config options
- list dependencies

---

### 2. Main Module (main.py)

main.py controls program flow, data flow, and performs all logical
operations and checks.

#### 1.0. Program flow

#### 1.1. Imports

#### 1.2. Classes

#### 1.3. Constants

#### 1.4. Functions

#### 1.5. Variables

#### TODO:

- Finish second draft flowchart
- pseudocode
- tests
- fill in pseudocode

---

### 3. GUI Module (ui.py)

ui.py handles the user interface, windows, human input and display output
(but not disk operations or api calls)

#### 1. Program flow and Organization

The ui module will contain code for the various menus and dialogs:
> ### UI Functions
>- Main Menu
>- File Picker Dialog
>- Model ID Lineup Dialog
>- Model Renaming Menu
>- Model De-Duping Dialog
>- Model-Page Preview Screen
>- Simple Dialog

#### 2. Imports

#### 3. Classes

#### 4. Constants

#### 5. Functions

#### 6. Variables

#### TODO:

- Finish second draft flowchart
- pseudocode
- tests
- fill in pseudocode

---

### 4. fileRAVEN.config

#### 1.0. tags

#### 1.1. default values

#### 1.2. options

#### 1.3. default config file

#### TODO: all

---

### 5. remote_db.json

#### 1. adding databases

Databases are added through the manage databases dialogue. (Main
Menu-->Manage Databases-->Add Remote Database) The first will be
prepopulated for civitai.com. The url will be hashed and the hash will serve
as the dbase_id for that database.
> 'dbase_id': <dbase_id>,<br>
> 'base_url': <https://civitai.com/api/v1/models>
> 'api_key_author': 'username'
> 'api_key_name': 'query'<br>
> 'api_search_by_author': "
>
TODO: Followup and complete civitai.com api configuration
> 'api_search_by_hash': "GET /api/v1/models?hash={hash_value}"<br>
> 'api_key_
> search_hash-256': ''
> search_hash-crc32: ''
> import requests

base_url = "https://api.civitai.co/api/v1/models"
query_params = {
"user": "WhiteRavenCou'atl"
}

response = requests.get(base_url, params=query_params)

# Process the response here

>

#### 2. equivalent variables

Equivalency Chart

| fileRAVEN               | Civitai API                       |                         Type                          | Description                                                                                               |
|-------------------------|:----------------------------------|:-----------------------------------------------------:|-----------------------------------------------------------------------------------------------------------|
| model_path              |                                   |                        string                         | the path to the model                                                                                     |
| model_file              |                                   |                        string                         | the current filename of the model on disk                                                                 |
| model_info              |                                   |                        string                         | The un-processed model information from remote source                                                     |
| model_info_json         |                                   |                      dictionary                       | The JSON representation of the model information                                                          |
| model_page_url1         |                                   |                        string                         | The URL of the model page on Civitai.com                                                                  |
| model_page_url2         |                                   |                        string                         | The URL of the model page on HuggingFace.co                                                               |
| model_256               |                                   |                        string                         | The SH256 hash of the model                                                                               |
| model_id                | id                                |                        number                         | The identifier for the model                                                                              |
| model_name              |                                   |                        string                         | The name of the model (fileRAVEN name)                                                                    |
| model_title             |                                   |                        string                         | The title of the model from the model page html (h1 header)                                               |
| model_src_name          | name                              |                        string                         | The name of the model from source. This is to facilitate reversion to default naming.                     |
| model_desc              | description                       |                        string                         | The description of the model (HTML)                                                                       |
| model_type              | type                              |                         enum                          | The model type: (Checkpoint, TextualInversion, Hyper-network, AestheticGradient, LORA, Controlnet, Poses) |
| model_nsfw              | nsfw                              |                        boolean                        | Whether the model is NSFW or not                                                                          |
| model_real              | model.poi                         |                        boolean                        | Whether the model depicts a person of interest (real person) or not                                       |
| model_tags              | tags                              |                       string[]                        | The tags associated with the model                                                                        |
| model_credit            | creator.username                  |                        string                         | The name of the creator or uploader                                                                       |
| model_ver_id            | modelVersions.id                  |                        number                         | The identifier for the model version                                                                      |
| model_version           | modelVersions.name                |                        string                         | The name of the model version                                                                             |
| model_file_url          | modelVersions.downloadUrl         |                        string                         | The download url to get the model file for this specific version                                          |
| model_triggers          | modelVersions.trainedWords        |                       string[]                        | The words used to trigger the model                                                                       |
| model_prime             | modelVersions.files.primary       |                 boolean \| undefined                  | If the file is the primary file for the model version                                                     |
| model_fp                | modelVersions.files.metadata.fp   |       enum                        \| undefined        | The specified floating point for the file: (fp16, fp32)                                                   |
| model_size              | modelVersions.files.metadata.size | enum                                     \| undefined | The specified model size for the file: (full, pruned)                                                     | 
| model_thumb_            | id modelVersions.images.id        |                        string                         | The id for the image                                                                                      |
| model_thumb_url         | modelVersions.images.url          |                        string                         | The url for the image                                                                                     |
| model_thumb_nsfw        | modelVersions.images.nsfw         |                        string                         | Whether or not the image is                                                                               |
| model_thumb_w           | modelVersions.images.width        |                        number                         | The original width of the image                                                                           |
| model_thumb_h           | modelVersions.images.height       |                        number                         | The original height of the image                                                                          |
| model_blur              | modelVersions.images.hash         |                        string                         | The blurhash of the image                                                                                 |
| model_permit_credit     |                                   |                        boolean                        | This model permits users to use the model without crediting the creator                                   |
| model_permit_sell       |                                   |                        boolean                        | This model permits users to sell the images they generate                                                 |
| model_permit_comgen     |                                   |                        boolean                        | This model permits users to run on services that generatel images for money                               |
| model_permit_civgen     |                                   |                        boolean                        | This model permits users to generate iumages on Civitai                                                   |
| model_permit_sharemerge |                                   |                        boolean                        | This model permits users to share merges <br/>using this model                                            |
| model_permit_sellmerge  |                                   |                        boolean                        | This model permits users to sell this model or merges using this model                                    |
| model_permit_different  |                                   |                        boolean                        | This model permits users to have different permissions when sharing merges                                |

#### 3. default values

#### 4. options

#### TODO: all

* Figure out how to add new database api data programmatically. Probably
  manually through a configuration window.
  <br>*Note to self: if there's no API it's not my problem. I'm not doing custom
  code for every website out there hosting models. Don't make this harder
  than it has to be.*

---

### 6. keyring.json

##### 1. Format

For each remote source, a key will be added to the ring with a number equal
to the source's id number in the local installation. The key will then be
encrypted using a basic method and stored with its key.

##### 2. Encryption

---

### 7. readme.md

#### 1. User level documentation

##### 1. Standalone Manager

##### 2. Plugins and Extensions

###### 1. stable-diffusion-webui extension

###### 2. ComfyUI extension

###### 3. AI Horde extension

###### 4. InvokeAI extension

#### 2. Tutorials

---
### 8. Developer's Reference

8.1 Default Naming Templates with notes on strategies
8.2 Launch Options
8.3 Model Identification

#### 1. Default naming strategies:


* General
    * Limit filenames to a set of (mostly) universally acceptable characters:
        * Lowercase letters
        * Uppercase letters
        * Numbers (0-9)
        * Special characters (underscore, hyphen, period), parenthesis,
        * brackets, braces
        * Generally compatible characters (i.e. (parenthesis), [brackets], and braces
        * the user is issued a permanently skippable (session) warning before filesystem operations are performed:
        * 
			** Heads up! **
		Using parentheses (()), brackets ([]), or braces ({}) in filenames
		can lead to compatibility issues on some systems or with certain software.
	
		* ** FAT32 Restriction: ** These characters aren't allowed on FAT32 file
		systems, common on older Windows systems and portable drives.
		*. ** Software Quirks: ** Some older software or scripts might not handle them
		correctly, causing problems.
		*. ** Web Compatibility: ** Some web servers or applications might have
		restrictions on these characters in filenames.

		To ensure maximum compatibility, stick to letters, numbers, underscores (_),
		periods (.), and hyphens (-).

			f. Spaces: Issue a brief, permanently skippable warning:

	Warning: While some systems allow spaces in filenames,
	they can lead to problems on others (older Windows, 
	web servers, etc.). 
			
	** Consider using hyphens (-) instead for universal compatibility. **

        2. For filename elements (e.g. model_name, version_name, etc.), Strip the elements of any forbidden characters (use a class to define letters allowed and loop through the string adding only allowed characters) before adding them to the proposed new filename
        3. Model types: [(Checkpoint, TextualInversion, Hypernetwork, AestheticGradient, LORA, Controlnet, Poses]
            a. Model type default strategies for base_name:
                1. checkpoints:
                    ◦ default format: {title}_by_{creator_name}.{model_style}.{base_model}.{version_name}
                    ▪ title:  the title from the model page. I have found that this is usually a much more descriptive and accurate name than the filename given.
                    ▪ creator_name:  the name of the creator of the model.
                    ▪ model_style:  the style of the model. Start with these categories and refine after testing and feedback:
                        • photo: photo-realistic models
                        • multi: general purpose models. Models not tuned to specific output types, or tuned to multiple types, e.g. SD1.5 base-model
                        • art: Non-photo-realistic artistic styles
                        • trad: Traditional media styles (e.g., oilpaint, watercolor, sketch)
                        • cgi3d: Computer-generated 3D styles (e.g., Pixar, Unreal Engine)
                        • abst: Abstract imagery"line": line-arts (e.g. anime, manga, sketch, charcoal, western traditional animation, comic book, cell-shaded, etc) style art
                ◦ LoRAs, TI’s, and Hypernetworks
                    ▪ Check model tags for keywords indicating the model represents a character, person, or celebrity, etc.
                    ▪ If the model has a tag that matches any of these keywords, the model is a character. Check to see if it represents a real person
                        • check the "resembles_real_person" flag in the API response, if "true" exit the check loop.
                        • If the model tags include any of [influencer, celebrity, actor, actress, instagram, tiktok, pornstar, singer, adult model] set the "resembles_real_person flag to true and exit the check loop
                        • Look for "not a real person", "not real", "cartoon", "anime", "hentai", "game", "rpg", or "fictional character" in the title and text of the model page.
                        • If model tags include any of [fictional, ai character, anime, not real, cartoon, anime, hentai, game, rpg, etc.] set the "resembles_real_person flag to false and exit the check loop "
                        • if any of the above return positive:
                            ◦ break out of the check loop and set the "resembles_real_person" flag to "false"
                            ◦ record the flag in the civitai.info file
                            ◦ else set the "resembles_real_person" flag to true and record the value in the civitai.info file.
                            ◦ give the user the option to change the flag before renaming the model.
                            ◦ If "resembles_real_person" != "false" then real_tag = "true"
                            ▪ Note: Trap the possibility of an empty flag and default to "true"
                        ◦ LoRAs and Hypernetworks:
                            ▪ Character:
                                • {Character_name}_of_{title}_portrayed_by_{actor}_by_<content_>
                        ◦ Textual Inversions:

        Information to extract from Civitai/Remote db:
            - id                    number      The identifier for the model
            - name                  string      The name of the model
            - type                  enum        The model type (Checkpoint,
                                                TextualInversion, Hypernetwork,
                                                AestheticGradient, LORA,
                                                Controlnet, Poses)
            - nsfw                  boolean     NSFW flag
            - tags                  list        A list of tags associated with
                                                the model
            - creator.username      string      The name of the creator
            - modelVersions.id      number      The identifier for the model version
            - modelVersions.name    string      The name of the model version
            - modelVersions.files.  enumerated  The specified floating point for
                metadata.fp                     the file (fp16, fp32, undefined)
            - modelVersions.files.  enumerated  The specified model size for the
                metadata.size                   file (full, pruned, or undefined)
            - modelVersions.images. string	    The id for the image
                id
            - modelVersions.images. string	    The url for the image
                url
            - modelVersions.images. number	    The original width of the image
                width
            - modelVersions.images. number	    The original height of the image
                height

1. Launch Options
2. Model Identification
    1. If the model does not have a model-page stored in its _\<model\>.info_,
       _\<model\>.civitai.info_, or _\<model\>.json_ files fileRAVEN will search
       through the configured remote databases to find a model-page.
        * NOTE: As it stands, it makes sense to hard-code http://civitai.com and
          http://huggingface.co. but as there are some few others out there, and
          surely others will emerge, fileRAVEN should not be limited by or to
          those 2 sites. Other databases may be added by dialog
          and their apis configured through the gui.
    2. The search will begin with a search by _CRC32_ hash in _civitai.
       com._
    3. If the _CRC32_ search has no returns, or multiple returns, the program
       will perform an _SHA-256_ search of _civitai.com._
    4. If both hash searches produce no matches, the program will search any
       other remote databases that allow searching by hash and following the
       same rules as above, as applicable.
    5. If there are still no matches, the program will search by all known
       searchable information (i.e. author_name, title, model_name,
       current_file_name, etc. on all configured databases).
   6. If the _SHA-256_ search returns a unique result, that model's information
       from the model-page will be loaded into the appropriate **model_info**
       fields, **NOTE:** Do not overwrite existing data without
       user confirmation!
   7. If there are multiple results from the _SHA-256_ search; or multiple
       results from the _CRC32_ search **_and_** no results from the _SHA-256_
       search;
       or there were no results from both the _CRC32_ and _SHA-256_
       searches, the results of all the subsequent searches will be
       presented for the user to select and confirm the correct model from the
       results (allowing for an option for "none-of-the-above")
   8. If no matching model is found on the remote databases, the user will
       be asked to supply what model information they can through the **"Edit
       Model Information"** dialogue.
   9. If searchable information is entered by the user that was not
       present before, the remote search should be automatically performed
       again.
   10. If the second search produces no results, proceed to **name_approval**,
       using available information to fill the template or
       re-displaying the current filename if no information is available.
   11. If the second search produces a unique result, load the model-page
       into **model_info** as above.
   12. If the second search produces multiple results, go to  **_vii_** above.
